// automatically generated by rust-bindgen
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
extern crate libc;
use libc::size_t;

pub enum Struct_WrenVM { }
pub type WrenVM = Struct_WrenVM;
pub enum Struct_WrenValue { }
pub type WrenValue = Struct_WrenValue;
pub type WrenReallocateFn =
    ::std::option::Option<unsafe extern "C" fn(memory: *mut ::std::os::raw::c_void,
                                                 newSize: size_t)
                                                 -> *mut ::std::os::raw::c_void>;
pub type WrenForeignMethodFn = ::std::option::Option<unsafe extern "C" fn(vm: *mut WrenVM)>;
pub type WrenFinalizerFn =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
pub type WrenLoadModuleFn =
    ::std::option::Option<unsafe extern "C" fn(vm: *mut WrenVM,
                                                 name: *const ::std::os::raw::c_char)
                                                 -> *mut ::std::os::raw::c_char>;
pub type WrenBindForeignMethodFn =
    ::std::option::Option<unsafe extern "C" fn(vm: *mut WrenVM,
                                                 module: *const ::std::os::raw::c_char,
                                                 className: *const ::std::os::raw::c_char,
                                                 isStatic: u8,
                                                 signature: *const ::std::os::raw::c_char)
                                                 -> WrenForeignMethodFn>;
pub type WrenWriteFn =
    ::std::option::Option<unsafe extern "C" fn(vm: *mut WrenVM,
                                                 text: *const ::std::os::raw::c_char)>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    WREN_ERROR_COMPILE = 0,
    WREN_ERROR_RUNTIME = 1,
    WREN_ERROR_STACK_TRACE = 2,
}
pub type WrenErrorType = Enum_Unnamed1;
pub type WrenErrorFn =
    ::std::option::Option<unsafe extern "C" fn(_type: WrenErrorType,
                                                 module: *const ::std::os::raw::c_char,
                                                 line: ::std::os::raw::c_int,
                                                 message: *const ::std::os::raw::c_char)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub allocate: WrenForeignMethodFn,
    pub finalize: WrenFinalizerFn,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type WrenForeignClassMethods = Struct_Unnamed2;
pub type WrenBindForeignClassFn =
    ::std::option::Option<unsafe extern "C" fn(vm: *mut WrenVM,
                                                 module: *const ::std::os::raw::c_char,
                                                 className: *const ::std::os::raw::c_char)
                                                 -> WrenForeignClassMethods>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub reallocateFn: WrenReallocateFn,
    pub loadModuleFn: WrenLoadModuleFn,
    pub bindForeignMethodFn: WrenBindForeignMethodFn,
    pub bindForeignClassFn: WrenBindForeignClassFn,
    pub writeFn: WrenWriteFn,
    pub errorFn: WrenErrorFn,
    pub initialHeapSize: size_t,
    pub minHeapSize: size_t,
    pub heapGrowthPercent: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type WrenConfiguration = Struct_Unnamed3;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed4 {
    WREN_RESULT_SUCCESS = 0,
    WREN_RESULT_COMPILE_ERROR = 1,
    WREN_RESULT_RUNTIME_ERROR = 2,
}
pub type WrenInterpretResult = Enum_Unnamed4;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed5 {
    WREN_TYPE_BOOL = 0,
    WREN_TYPE_NUM = 1,
    WREN_TYPE_FOREIGN = 2,
    WREN_TYPE_LIST = 3,
    WREN_TYPE_NULL = 4,
    WREN_TYPE_STRING = 5,
    WREN_TYPE_UNKNOWN = 6,
}
pub type WrenType = Enum_Unnamed5;
extern "C" {
    pub fn wrenInitConfiguration(configuration: *mut WrenConfiguration);
    pub fn wrenNewVM(configuration: *mut WrenConfiguration) -> *mut WrenVM;
    pub fn wrenFreeVM(vm: *mut WrenVM);
    pub fn wrenCollectGarbage(vm: *mut WrenVM);
    pub fn wrenInterpret(vm: *mut WrenVM,
                         source: *const ::std::os::raw::c_char)
                         -> WrenInterpretResult;
    pub fn wrenMakeCallHandle(vm: *mut WrenVM,
                              signature: *const ::std::os::raw::c_char)
                              -> *mut WrenValue;
    pub fn wrenCall(vm: *mut WrenVM, method: *mut WrenValue) -> WrenInterpretResult;
    pub fn wrenReleaseValue(vm: *mut WrenVM, value: *mut WrenValue);
    pub fn wrenGetSlotCount(vm: *mut WrenVM) -> ::std::os::raw::c_int;
    pub fn wrenEnsureSlots(vm: *mut WrenVM, numSlots: ::std::os::raw::c_int);
    pub fn wrenGetSlotType(vm: *mut WrenVM, slot: ::std::os::raw::c_int) -> WrenType;
    pub fn wrenGetSlotBool(vm: *mut WrenVM, slot: ::std::os::raw::c_int) -> u8;
    pub fn wrenGetSlotBytes(vm: *mut WrenVM,
                            slot: ::std::os::raw::c_int,
                            length: *mut ::std::os::raw::c_int)
                            -> *const ::std::os::raw::c_char;
    pub fn wrenGetSlotDouble(vm: *mut WrenVM,
                             slot: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_double;
    pub fn wrenGetSlotForeign(vm: *mut WrenVM,
                              slot: ::std::os::raw::c_int)
                              -> *mut ::std::os::raw::c_void;
    pub fn wrenGetSlotString(vm: *mut WrenVM,
                             slot: ::std::os::raw::c_int)
                             -> *const ::std::os::raw::c_char;
    pub fn wrenGetSlotValue(vm: *mut WrenVM, slot: ::std::os::raw::c_int) -> *mut WrenValue;
    pub fn wrenSetSlotBool(vm: *mut WrenVM, slot: ::std::os::raw::c_int, value: u8);
    pub fn wrenSetSlotBytes(vm: *mut WrenVM,
                            slot: ::std::os::raw::c_int,
                            bytes: *const ::std::os::raw::c_char,
                            length: size_t);
    pub fn wrenSetSlotDouble(vm: *mut WrenVM,
                             slot: ::std::os::raw::c_int,
                             value: ::std::os::raw::c_double);
    pub fn wrenSetSlotNewForeign(vm: *mut WrenVM,
                                 slot: ::std::os::raw::c_int,
                                 classSlot: ::std::os::raw::c_int,
                                 size: size_t)
                                 -> *mut ::std::os::raw::c_void;
    pub fn wrenSetSlotNewList(vm: *mut WrenVM, slot: ::std::os::raw::c_int);
    pub fn wrenSetSlotNull(vm: *mut WrenVM, slot: ::std::os::raw::c_int);
    pub fn wrenSetSlotString(vm: *mut WrenVM,
                             slot: ::std::os::raw::c_int,
                             text: *const ::std::os::raw::c_char);
    pub fn wrenSetSlotValue(vm: *mut WrenVM, slot: ::std::os::raw::c_int, value: *mut WrenValue);
    pub fn wrenInsertInList(vm: *mut WrenVM,
                            listSlot: ::std::os::raw::c_int,
                            index: ::std::os::raw::c_int,
                            elementSlot: ::std::os::raw::c_int);
    pub fn wrenGetVariable(vm: *mut WrenVM,
                           module: *const ::std::os::raw::c_char,
                           name: *const ::std::os::raw::c_char,
                           slot: ::std::os::raw::c_int);
}

#[cfg(test)]mod test {
    use std::default::Default;
    use super::{wrenNewVM, WrenConfiguration, wrenInterpret, wrenFreeVM, WrenInterpretResult};
    use std::ffi::CString;

    #[test]
    fn test_new_vm() {
        unsafe {
            let mut config: WrenConfiguration = Default::default();
            let vm = wrenNewVM(&mut config);
            let source = CString::new(r#"
class Unicorn {
    hasHorn {
        return true
    }
}

IO.print("hello, world")
            "#)
                             .unwrap()
                             .as_ptr();
            let result = wrenInterpret(vm, source);
            // assert_eq!(result, WrenInterpretResult::WREN_RESULT_SUCCESS);
            wrenFreeVM(vm);
        }
    }
}
